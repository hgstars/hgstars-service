<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xmlns:context="http://www.springframework.org/schema/context"
	   xmlns:tx="http://www.springframework.org/schema/tx"
	   xmlns:jpa="http://www.springframework.org/schema/data/jpa"
	   xmlns:cache="http://www.springframework.org/schema/cache" xmlns:p="http://www.springframework.org/schema/p"
	   xmlns:util="http://www.springframework.org/schema/util"
	   xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
		http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa-1.3.xsd http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache.xsd http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd"
	   default-lazy-init="true">

	<description>Spring公共配置 </description>

	<util:properties id="wxProperties"
					 location="classpath:/wx.properties" />
	<!-- 使用annotation 自动注册bean, 并保证@Required、@Autowired的属性被注入 -->
	<context:component-scan base-package="com.hgstars.service.aaa"/>

	<!-- Jpa Entity Manager 配置 -->
	<bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
		<property name="dataSource" ref="dataSource"/>
		<property name="jpaVendorAdapter" ref="hibernateJpaVendorAdapter"/>
		<property name="packagesToScan" value="com.hgstars.models"/>
		<property name="jpaProperties">
			<props>
				<!-- 命名规则 My_NAME->MyName -->
				<prop key="hibernate.ejb.naming_strategy">org.hibernate.cfg.ImprovedNamingStrategy</prop>
				<prop key="hibernate.show_sql">${showSql}</prop>
				<prop key="hibernate.format_sql">${sqlFormat}</prop>
				<prop key="hibernate.hbm2ddl.auto">${hbm2ddl.auto}</prop>
			</props>
		</property>
	</bean>

	<bean id="hibernateJpaVendorAdapter" class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
		<property name="databasePlatform">
			<bean factory-method="getDialect" class="org.springside.modules.persistence.Hibernates">
				<constructor-arg ref="dataSource"/>
			</bean>
		</property>
	</bean>

	<!-- Spring Data Jpa配置 -->
	<jpa:repositories base-package="com.hgstars.service.aaa"  transaction-manager-ref="transactionManager" entity-manager-factory-ref="entityManagerFactory"/>

	<!-- Jpa 事务配置 -->
	<bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
		<property name="entityManagerFactory" ref="entityManagerFactory"/>
	</bean>

	<!-- 使用annotation定义事务 -->
	<tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true" />

	<!-- JSR303 Validator定义 -->
	<bean id="validator" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean" />

	<!-- 配置RestTemplate -->
	<!--Http client Factory-->
	<bean id="httpClientFactory" class="org.springframework.http.client.SimpleClientHttpRequestFactory">
		<property name="connectTimeout"  value="3000"/>
		<property name="readTimeout"  value="2000"/>
	</bean>

	<!--RestTemplate-->
	<bean id="restTemplate" class="org.springframework.web.client.RestTemplate">
		<constructor-arg ref="httpClientFactory"/>
		<property name="messageConverters">
			<list>
				<bean class="org.springframework.http.converter.FormHttpMessageConverter"/>
				<!--<bean class="org.springframework.http.converter.xml.MappingJackson2XmlHttpMessageConverter"/>-->
				<bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter"/>
				<bean class="org.springframework.http.converter.StringHttpMessageConverter">
					<property name="supportedMediaTypes">
						<list>
							<value>text/plain;charset=UTF-8</value>
							<value>application/json</value>
							<value>text/html;charset=utf-8</value>
						</list>
					</property>
				</bean>
			</list>
		</property>
	</bean>

	<!-- production环境 -->
	<beans profile="production">
		<context:property-placeholder ignore-unresolvable="true"
									  location="classpath*:/application.properties" />

		<!-- 数据源配置, 使用Tomcat JDBC连接池 -->
		<bean id="dataSource" class="org.apache.tomcat.jdbc.pool.DataSource" destroy-method="close">
			<!-- Connection Info -->
			<property name="driverClassName" value="${jdbc.driver}" />
			<property name="url" value="${jdbc.url}" />
			<property name="username" value="${jdbc.username}" />
			<property name="password" value="${jdbc.password}" />

			<!-- Connection Pooling Info -->
			<property name="maxActive" value="${jdbc.pool.maxActive}" />
			<property name="maxIdle" value="${jdbc.pool.maxIdle}" />
			<property name="minIdle" value="0" />
			<property name="defaultAutoCommit" value="false" />
		</bean>

		<!-- 数据源配置,使用应用服务器的数据库连接池 -->
		<!--<jee:jndi-lookup id="dataSource" jndi-name="java:comp/env/jdbc/ExampleDB" />-->
	</beans>

	<!-- local development环境 -->
	<beans profile="development">
		<context:property-placeholder ignore-resource-not-found="true"
									  location="classpath*:/application.properties,classpath*:/application.development.properties" />

		<!-- Tomcat JDBC连接池 -->
		<bean id="dataSource" class="org.apache.tomcat.jdbc.pool.DataSource" destroy-method="close">
			<property name="driverClassName" value="${jdbc.driver}" />
			<property name="url" value="${jdbc.url}" />
			<property name="username" value="${jdbc.username}" />
			<property name="password" value="${jdbc.password}" />
			<property name="defaultAutoCommit" value="false" />
		</bean>
	</beans>
	<beans>
		<!-- 启用缓存注解功能，这个是必须的，否则注解不会生效，另外，该注解一定要声明在spring主配置文件中才会生效 -->
		<cache:annotation-driven cache-manager="cacheManager" />

		<!-- spring自己的换管理器，这里定义了两个缓存位置名称 ，既注解中的value -->
		<bean id="cacheManager" class="org.springframework.cache.support.SimpleCacheManager">
			<property name="caches">
				<set>
					<bean class="com.hgstars.core.cache.redis.RedisCache">
						<property name="redisTemplate" ref="redisTemplate" />
						<property name="name" value="default" />
						<property name="timeout" value="600" /><!-- 10分钟后过期 -->
					</bean>
					<bean class="com.hgstars.core.cache.redis.RedisCache">
						<property name="redisTemplate" ref="redisTemplate" />
						<property name="name" value="system.config" />
						<property name="timeout" value="600" /><!-- 10分钟后过期 -->
					</bean>
					<bean class="com.hgstars.core.cache.redis.RedisCache">
						<property name="redisTemplate" ref="redisTemplate" />
						<property name="name" value="account" />
						<property name="timeout" value="600" /><!-- 10分钟后过期 -->
					</bean>
					<bean class="com.hgstars.core.cache.redis.RedisCache">
						<property name="redisTemplate" ref="redisTemplate" />
						<property name="name" value="weixin" />
						<property name="timeout" value="5400" /><!-- 一个半小时过期，（微信token 是两个小时过期） -->
					</bean>
				</set>
			</property>
		</bean>

		<!-- redis 相关配置 -->
		<bean id="poolConfig" class="redis.clients.jedis.JedisPoolConfig">
			<property name="maxIdle" value="${redis.maxIdle}" />
			<property name="maxWaitMillis" value="${redis.maxWait}" />
			<property name="testOnBorrow" value="${redis.testOnBorrow}" />
		</bean>

		<bean id="connectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory"
			  p:host-name="${redis.host}"
			  p:port="${redis.port}"
			  p:password="${redis.password}"
			  p:pool-config-ref="poolConfig"
			  p:database="${redis.database}"
		/>

		<bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate">
			<property name="connectionFactory" ref="connectionFactory" />
		</bean>
	</beans>
</beans>